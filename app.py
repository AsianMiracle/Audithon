import json
from flask import Flask, render_template, url_for, request
import pandas as pd
import numpy as np
import xlrd
from sklearn.preprocessing import MinMaxScaler
app = Flask(__name__)


def innov_n1(file_excel):
    data = pd.read_excel(file_excel, skiprows=3, index_col=0).loc[:'Чукотский автономный округ', 2015:].T \
        .rename(columns={'  в том числе Ненецкий автономный округ': 'Ненецкий автономный округ', \
                         'Республика Крым 2)': 'Республика Крым', \
                         'г.  Севастополь 2)': 'г. Севастополь', \
                         'Республика Адыгея (Адыгея)': 'Республика Адыгея', \
                         'Республика Алтай ': 'Республика Алтай', \
                         'Чеченская Республика ': 'Чеченская Республика', \
                         '  Ханты-Мансийский \n  автономный округ - Югра': 'Ханты-Мансийский автономный округ - Югра', \
                         'Кемеровская область- Кузбасс': 'Кемеровская область - Кузбасс', \
                         '  Ямало-Ненецкий\n  автономный округ': 'Ямало-Ненецкий автономный округ'}) \
        .drop(columns=['  в том числе:', 'Архангельская область без АО', 'Тюменская область без АО', np.nan]) \
        .drop(index=['Unnamed: 9']).fillna(0)
    data_common = data[
        ['Российская Федерация', '  Центральный федеральный округ', '  Северо-Западный федеральный округ', \
         '  Южный федеральный округ', '  Северо-Кавказский федеральный округ', '  Приволжский федеральный округ', \
         '  Уральский федеральный округ', '  Сибирский федеральный округ', '  Дальневосточный федеральный округ']]
    data = data.drop(columns=data_common.columns)
    for column in data.columns:
        data[column] = data[column].replace('-', 0)
    data = data.T
    data.columns = ['2015', '2016', '2017', '2018', '2019']
    data = data.T
    return data


# Удельный вес организаций, осуществлявших технологические инновации,
# в общем числе обследованных организаций, по субъектам Российской Федерации
def innov_n2(file_excel):
    data = pd.read_excel(file_excel, skiprows=3, index_col=0).loc[:'Чукотский автономный округ', 2015:].T \
        .rename(columns={'  в том числе Ненецкий автономный округ': 'Ненецкий автономный округ', \
                         'Республика Крым 2)': 'Республика Крым', \
                         'г.Севастополь 2)': 'г. Севастополь', \
                         'Республика Адыгея (Адыгея)': 'Республика Адыгея', \
                         'Республика Алтай ': 'Республика Алтай', \
                         'Чеченская Республика ': 'Чеченская Республика', \
                         'в том числе:\nХанты-Мансийский автономный округ - Югра': 'Ханты-Мансийский автономный округ - Югра', \
                         'Кемеровская область- Кузбасс': 'Кемеровская область - Кузбасс', \
                         '  Ямало-Ненецкий\n  автономный округ': 'Ямало-Ненецкий автономный округ'}) \
        .drop(columns=['Архангельская область без АО', 'Тюменская область без АО', np.nan]) \
        .drop(index=['Unnamed: 9']).fillna(0)
    data_common = data[
        ['Российская Федерация', '  Центральный федеральный округ', '  Северо-Западный федеральный округ', \
         'Южный федеральный округ', '  Северо-Кавказский федеральный округ', '  Приволжский федеральный округ', \
         '  Уральский федеральный округ', '  Сибирский федеральный округ', '  Дальневосточный федеральный округ']]
    data = data.drop(columns=data_common.columns)
    for column in data.columns:
        data[column] = data[column].replace('-', 0)
    data = data.T
    data.columns = ['2015', '2016', '2017', '2018', '2019']
    data = data.T
    return data


# Объем инновационных товаров, работ, услуг, по субъектам Российской Федерации
def innov_n3(file_excel):
    data = pd.read_excel(file_excel, skiprows=6, index_col=0).loc[:'Чукотский автономный округ', 2015:'2010.1'] \
        .drop(columns='2010.1').T \
        .rename(columns={'в том числе Ненецкий автономный округ': 'Ненецкий автономный округ', \
                         'Республика Крым2)': 'Республика Крым', \
                         # 'Республика Адыгея (Адыгея)':'Республика Адыгея', \
                         'Чеченская Республика ': 'Чеченская Республика', \
                         'г. Севастополь2)': 'г. Севастополь', \
                         'Республика Алтай ': 'Республика Алтай', \
                         'в том числе: \nХанты-Мансийский автономный округ -           Югра': 'Ханты-Мансийский автономный округ - Югра', \
                         'Кемеровская область- Кузбасс': 'Кемеровская область - Кузбасс', \
                         '  Ямало-Ненецкий\n  автономный округ': 'Ямало-Ненецкий автономный округ'}) \
        .drop(columns=[' Архангельская область без АО', 'Тюменская область без АО']) \
        .fillna(0)
    data_common = data[['Российская Федерация', 'Центральный федеральный округ', 'Северо-Западный федеральный округ', \
                        '  Южный федеральный округ', '  Северо-Кавказский федеральный округ',
                        'Приволжский федеральный округ', \
                        'Уральский федеральный округ', 'Сибирский федеральный округ',
                        'Дальневосточный федеральный округ']]
    data = data.drop(columns=data_common.columns)
    for column in data.columns:
        data[column] = data[column].replace('-', 0)
    data = data / data.sum() * 100
    data = data.T
    data.columns = ['2015', '2016', '2017', '2018', '2019']
    data = data.T
    return data


# Удельный вес инновационных товаров, работ, услуг в общем объеме отгруженных
# товаров, выполненных работ, услуг, по субъектам Российской Федерации
def innov_n4(file_excel):
    data = pd.read_excel(file_excel, skiprows=4, index_col=0).loc[:'Чукотский автономный округ', 2015:'2010.1'] \
        .drop(columns='2010.1').T \
        .rename(columns={'  в том числе Ненецкий автономный округ': 'Ненецкий автономный округ', \
                         'Республика Крым2)': 'Республика Крым', \
                         'г. Севастополь2)': 'г. Севастополь', \
                         'Республика Алтай ': 'Республика Алтай', \
                         'Республика Адыгея (Адыгея)': 'Республика Адыгея', \
                         'Чеченская Республика ': 'Чеченская Республика', \
                         'в том числе:\nХанты-Мансийский автономный округ - Югра': 'Ханты-Мансийский автономный округ - Югра', \
                         'Кемеровская область- Кузбасс': 'Кемеровская область - Кузбасс', \
                         '  Ямало-Ненецкий\n  автономный округ': 'Ямало-Ненецкий автономный округ'}) \
        .drop(columns=['Архангельская область без АО', 'Тюменская область без АО']) \
        .fillna(0)
    data_common = data[
        ['Российская Федерация', '  Центральный федеральный округ', '  Северо-Западный федеральный округ', \
         '  Южный федеральный округ', '  Северо-Кавказский федеральный округ', '  Приволжский федеральный округ', \
         '  Уральский федеральный округ', '  Сибирский федеральный округ', '  Дальневосточный федеральный округ']]
    data = data.drop(columns=data_common.columns)
    for column in data.columns:
        data[column] = data[column].replace('-', 0).replace('…', 0)
    data = data.T
    data.columns = ['2015', '2016', '2017', '2018', '2019']
    data = data.T
    return data


# Затраты на технологические инновации организаций по субъектам Российской Федерации
def innov_n5(file_excel):
    # считывание в датафрейм листа excel-файла с данными за 2015 год (ввиду отличий этих данных от данных 2016 - 2019 г.)
    data = pd.read_excel(file_excel, sheet_name=str(2015), skiprows=6, index_col=0).loc[:, :'2'].T
    data.columns = data.columns.str.lstrip()
    data = data.loc[:, :'г. Севастополь'] \
        .rename(columns={'  Ханты-Мансийский \n  автономный округ - Югра': 'Ханты-Мансийский автономный округ', \
                         'Кемеровская область': 'Кемеровская область - Кузбасс', \
                         'Республика Адыгея (Адыгея)': 'Республика Адыгея', \
                         'Республика Татарстан (Татарстан)': 'Республика Татарстан', \
                         'Республика Алтай ': 'Республика Алтай', \
                         'Калининградская область': 'Калинингpадская область', \
                         # 'Ханты-Мансийский автономный округ - Югра':'Ханты-Мансийский автономный округ', \
                         'Чувашская Республика -Чувашия': 'Чувашская Республика'}) \
        .drop(columns=['в том числе:', 'Архангельская область (кроме Ненецкого автономного округа)',
                       'Тюменская область без автономных округов'])
    for column in data.columns:
        data[column] = data[column].replace('-', 0)
        data[column] = data[column].astype(float)
    data_common = data[['Российская Федерация', 'Центральный федеральный округ', 'Северо-Западный федеральный округ', \
                        'Южный федеральный округ', 'Северо-Кавказский федеральный округ',
                        'Приволжский федеральный округ', \
                        'Уральский федеральный округ', 'Сибирский федеральный округ',
                        'Дальневосточный федеральный округ', 'Крымский федеральный округ']]
    data = data.drop(columns=data_common.columns)

    # последовательное считывание листов файла за 2016 - 2019 года и добавление данных к датафрейму 2015 года
    for sheet in range(2016, 2020):
        new_sheet = pd.read_excel(file_excel, sheet_name=str(sheet), skiprows=6, index_col=0).loc[:, :'2'].T
        new_sheet.columns = new_sheet.columns.str.lstrip()
        new_sheet = new_sheet.loc[:, :'Чукотский автономный округ'] \
            .rename(columns={'  Ханты-Мансийский \n  автономный округ - Югра': 'Ханты-Мансийский автономный округ', \
                             'Кемеровская область': 'Кемеровская область - Кузбасс', \
                             'Кемеровская область- Кузбасс': 'Кемеровская область - Кузбасс', \
                             'Республика Адыгея (Адыгея)': 'Республика Адыгея', \
                             'Калининградская область': 'Калинингpадская область', \
                             # 'Ханты-Мансийский автономный округ - Югра':'Ханты-Мансийский автономный округ', \
                             'Республика Алтай ': 'Республика Алтай', \
                             'Республика Татарстан (Татарстан)': 'Республика Татарстан', \
                             'Чувашская Республика -Чувашия': 'Чувашская Республика'}) \
            .drop(columns=['в том числе:', 'Архангельская область (кроме Ненецкого автономного округа)',
                           'Тюменская область без автономных округов'])
        for column in new_sheet.columns:
            new_sheet[column] = new_sheet[column].replace('-', 0)
            new_sheet[column] = new_sheet[column].astype(float)
        new_sheet_common = new_sheet[
            ['Российская Федерация', 'Центральный федеральный округ', 'Северо-Западный федеральный округ', \
             'Южный федеральный округ', 'Северо-Кавказский федеральный округ', 'Приволжский федеральный округ', \
             'Уральский федеральный округ', 'Сибирский федеральный округ', 'Дальневосточный федеральный округ']]
        new_sheet = new_sheet.drop(columns=new_sheet_common.columns)
        data = data.merge(new_sheet, how='outer')
    data.index = range(2015, 2020)
    data = data / data.sum() * 100
    data = data.T
    data.columns = ['2015', '2016', '2017', '2018', '2019']
    data = data.T
    return data


# Затраты на инновационную деятельность организаций, по субъектам Российской Федерации
def innov_n6(file_excel):
    data = pd.read_excel(file_excel, skiprows=3, index_col=0).loc[:'Чукотский автономный округ', 2015:].T \
        .rename(columns={'  в том числе Ненецкий автономный округ': 'Ненецкий автономный округ', \
                         'Республика Крым2)': 'Республика Крым', \
                         'г. Севастополь2)': 'г. Севастополь', \
                         'Чеченская Республика ': 'Чеченская Республика', \
                         'Республика Алтай ': 'Республика Алтай', \
                         'Кемеровская область- Кузбасс': 'Кемеровская область - Кузбасс'}) \
        .drop(columns=['Архангельская область без АО', 'Тюменская область без АО', '   в том числе:']) \
        .fillna(0)
    data_common = data[['Российская Федерация', 'Центральный федеральный округ', 'Северо-Западный федеральный округ', \
                        'Южный федеральный округ', 'Северо-Кавказский федеральный округ',
                        'Приволжский федеральный округ', \
                        'Уральский федеральный округ', 'Сибирский федеральный округ',
                        'Дальневосточный федеральный округ']]
    data = data.drop(columns=data_common.columns)
    for column in data.columns:
        data[column] = data[column].replace('-', 0)
    data = data / data.sum() * 100
    data = data.T
    data.columns = ['2015', '2016', '2017', '2018', '2019']
    data = data.T
    return data


# Удельный вес затрат на инновационную деятельность в общем объеме отгруженных товаров,
# выполненных работ, услуг, по субъектам Российской Федерации
def innov_n7(file_excel):
    data = pd.read_excel(file_excel, skiprows=3, index_col=0).loc[:'Чукотский автономный округ', 2015:].T \
        .rename(columns={' в том числе Ненецкий автономный округ': 'Ненецкий автономный округ', \
                         'Республика Крым2)': 'Республика Крым', \
                         'Республика Алтай ': 'Республика Алтай', \
                         'Чеченская Республика ': 'Чеченская Республика', \
                         'в том числе:\nХанты-Мансийский автономный округ - Югра': 'Ханты-Мансийский автономный округ - Югра', \
                         'г. Севастополь2)': 'г. Севастополь', \
                         'Кемеровская область- Кузбасс': 'Кемеровская область - Кузбасс'}) \
        .drop(columns=['Архангельская область без АО', 'Тюменская область без АО']) \
        .fillna(0)
    data_common = data[['Российская Федерация', 'Центральный федеральный округ', 'Северо-Западный федеральный округ', \
                        'Южный федеральный округ', 'Северо-Кавказский федеральный округ',
                        'Приволжский федеральный округ', \
                        'Уральский федеральный округ', 'Сибирский федеральный округ',
                        'Дальневосточный федеральный округ']]
    data = data.drop(columns=data_common.columns)
    for column in data.columns:
        data[column] = data[column].replace('-', 0)
    data = data.T
    data.columns = ['2015', '2016', '2017', '2018', '2019']
    data = data.T
    return data


# данные за 2015-2018 года (больше нет)
# Удельный вес организаций, осуществлявших маркетинговые инновации в отчетном году,
# в общем числе обследованных организаций, по субъектам  Российской Федерации
def innov_n8(file_excel):
    data = pd.read_excel(file_excel, skiprows=3, index_col=0).loc[:'Чукотский автономный округ', 2015:].T \
        .rename(columns={'  в том числе Ненецкий автономный округ': 'Ненецкий автономный округ', \
                         'Республика Крым3)': 'Республика Крым', \
                         'Республика Алтай ': 'Республика Алтай', \
                         'Чеченская Республика ': 'Чеченская Республика', \
                         'в том числе:\nХанты-Мансийский автономный округ - Югра': 'Ханты-Мансийский автономный округ - Югра', \
                         'г. Севастополь3)': 'г. Севастополь', \
                         'Кемеровская область': 'Кемеровская область - Кузбасс'}) \
        .drop(columns=['Архангельская область без АО2)', 'Тюменская область без АО2)']) \
        .fillna(0)
    data_common = data[
        ['Российская Федерация', '  Центральный федеральный округ', '  Северо-Западный федеральный округ', \
         '  Южный федеральный округ', '  Северо-Кавказский федеральный округ', '  Приволжский федеральный округ', \
         '  Уральский федеральный округ', '  Сибирский федеральный округ', '  Дальневосточный федеральный округ']]
    data = data.drop(columns=data_common.columns)
    for column in data.columns:
        data[column] = data[column].replace('-', 0)
    return data


# данные за 2015-2018 года (больше нет)
# Удельный вес организаций, осуществлявших организационные инновации в отчетном году,
# в общем числе обследованных организаций, по субъектам  Российской Федерации
def innov_n9(file_excel):
    data = pd.read_excel(file_excel, skiprows=3, index_col=0).loc[:'Чукотский автономный округ', 2015:].T \
        .rename(columns={'     в том числе Ненецкий автономный округ': 'Ненецкий автономный округ', \
                         'Республика Крым3)': 'Республика Крым', \
                         'в том числе:\nХанты-Мансийский автономный округ - Югра': 'Ханты-Мансийский автономный округ - Югра', \
                         'г. Севастополь3)': 'г. Севастополь', \
                         'Чеченская Республика ': 'Чеченская Республика', \
                         'Калининградская область': 'Калинингpадская область', \
                         'Кемеровская область': 'Кемеровская область - Кузбасс'}) \
        .drop(columns=['Архангельская область без АО2)', 'Тюменская область без АО2)']) \
        .fillna(0)
    data_common = data[
        ['Российская Федерация', '  Центральный федеральный округ', '  Северо-Западный федеральный округ', \
         '  Южный федеральный округ', '  Северо-Кавказский федеральный округ', '  Приволжский федеральный округ', \
         '  Уральский федеральный округ', '  Сибирский федеральный округ', '  Дальневосточный федеральный округ']]
    data = data.drop(columns=data_common.columns)
    for column in data.columns:
        data[column] = data[column].replace('-', 0)
    return data


# Разработанные передовые производственные технологии по субъектам Российской Федерации
def innov8(file_excel):
    data = pd.read_excel(file_excel, skiprows=3, index_col=0).loc[:'Чукотский автономный округ', 2015:].T \
        .rename(columns={'\xa0\xa0\xa0в том числе Ненецкий\n   автономный округ': 'Ненецкий автономный округ', \
                         'Республика Крым 2)': 'Республика Крым', \
                         '\xa0\xa0\xa0Ханты-Мансийский\n   автономный округ - Югра': 'Ханты-Мансийский автономный округ - Югра', \
                         '\xa0\xa0\xa0Ямало-Ненецкий\n   автономный округ': 'Ямало-Ненецкий автономный округ', \
                         'г. Севастополь 2)': 'г. Севастополь', \
                         'Чувашская республика': 'Чувашская Республика', \
                         'Чеченская Республика ': 'Чеченская Республика', \
                         'Республика Северная Осетия- Алания': 'Республика Северная Осетия - Алания', \
                         'Кемеровская область': 'Кемеровская область - Кузбасс'}) \
        .drop(columns=['Архангельская область без АО', 'Тюменская область без АО', '     в том числе:']) \
        .fillna(0)
    data_common = data[['Российская Федерация', 'Центральный федеральный округ', 'Северо-Западный федеральный округ', \
                        'Южный федеральный округ', 'Северо-Кавказский федеральный округ',
                        'Приволжский федеральный округ', \
                        'Уральский федеральный округ', 'Сибирский федеральный округ',
                        'Дальневосточный федеральный округ']]
    data = data.drop(columns=data_common.columns)
    for column in data.columns:
        data[column] = data[column].replace('-', 0).replace('... 3)', 0)  # np.nan)
        data[column].fillna(value=data[column].mean(), inplace=True)
        data[column] = data[column].astype(float)
    data = data.fillna(0)
    data = data / data.sum() * 100
    data = data.fillna(0)
    data = data.T
    data.columns = ['2015', '2016', '2017', '2018', '2019']
    data = data.T
    return data


# Используемые передовые производственные технологии по субъектам Российской Федерации
def innov9(file_excel):
    data = pd.read_excel(file_excel, skiprows=3, index_col=0).loc[:'Чукотский автономный округ', 2015:].T \
        .rename(columns={'  в том числе Ненецкий\n  автономный округ': 'Ненецкий автономный округ', \
                         'Республика Крым2)': 'Республика Крым', \
                         '  Ханты-Мансийский \n  автономный округ - Югра': 'Ханты-Мансийский автономный округ - Югра', \
                         '  Ямало-Ненецкий\n  автономный округ': 'Ямало-Ненецкий автономный округ', \
                         'г. Севастополь2)': 'г. Севастополь', \
                         'Чеченская Республика ': 'Чеченская Республика', \
                         'Калининградская область': 'Калинингpадская область', \
                         'Кемеровская область': 'Кемеровская область - Кузбасс'}) \
        .drop(columns=['Архангельская область кроме Hенецкого авт.округа', 'Тюменская область без автономных округов',
                       '     в том числе:']) \
        .fillna(0)
    data_common = data[['Российская Федерация', 'Центральный федеральный округ', 'Северо-Западный федеральный округ', \
                        'Южный федеральный округ', 'Северо-Кавказский федеральный округ',
                        'Приволжский федеральный округ', \
                        'Уральский федеральный округ', 'Сибирский федеральный округ',
                        'Дальневосточный федеральный округ']]
    data = data.drop(columns=data_common.columns)
    for column in data.columns:
        data[column] = data[column].replace('-', 0).replace('... 3)', np.nan)
        data[column].fillna(value=data[column].mean(), inplace=True)
        data = data.fillna(0)
    data = data / data.sum() * 100
    data = data.fillna(0)
    data = data.T
    data.columns = ['2015', '2016', '2017', '2018', '2019']
    data = data.T
    return data


# Сведения об использовании объектов интеллектуальной собственности по субъектам Российской Федерации
def innov10(file_excel):
    # считывание в датафрейм листа excel-файла с данными за 2015 год (ввиду отличий этих данных от данных 2016 - 2019 г.)
    data = pd.read_excel(file_excel, sheet_name=str(2015), index_col=0).loc[
           '  РОССИЙСКАЯ ФЕДЕРАЦИЯ':'  Чукотский автономный округ', :].T
    data.columns = data.columns.str.strip()
    data = data.rename(columns={'Ханты – Мансийский\n     автономный округ': 'Ханты-Мансийский автономный округ - Югра', \
                                'Кемеровская область': 'Кемеровская область - Кузбасс', \
                                'в т. ч. Ненецкий автономный \n     округ': 'Ненецкий автономный округ', \
                                'в т. ч. Ненецкий автономный  округ': 'Ненецкий автономный округ', \
                                'Удмурдская Республика': 'Удмуртская Республика', \
                                'Калининградская область': 'Калинингpадская область', \
                                'Еврейская авт.область': 'Еврейская автономная область', \
                                'Ямало-Ненецкий автономный \n      округ': 'Ямало-Ненецкий автономный округ'}) \
        .drop(columns=['в том числе:', 'Архангельская область без АО', 'Тюменская область без АО'])
    data_common = data[['РОССИЙСКАЯ ФЕДЕРАЦИЯ', 'Центральный федеральный округ', 'Северо-Западный федеральный округ', \
                        'Южный федеральный округ', 'Северо-Кавказский федеральный округ',
                        'Приволжский федеральный округ', \
                        'Уральский федеральный округ', 'Сибирский федеральный округ',
                        'Дальневосточный федеральный округ']]
    data = data.drop(columns=data_common.columns)
    for column in data.columns:
        data[column] = data[column].replace('-', 0)
        data[column] = data[column].astype(float)
    data = data.T
    data['Unnamed: 1'] = data.sum(axis=1)
    data = data.drop(data.columns[1:], axis=1).rename(columns={'Unnamed: 1': 2015}).T

    # последовательное считывание листов файла за 2016 - 2019 года и добавление данных к датафрейму 2015 года
    for sheet in range(2016, 2020):
        new_sheet = pd.read_excel(file_excel, sheet_name=str(sheet), index_col=0).loc[
                    '  РОССИЙСКАЯ ФЕДЕРАЦИЯ':'  Чукотский автономный округ', :].T
        new_sheet.columns = new_sheet.columns.str.strip()
        new_sheet = new_sheet.rename(
            columns={'Ханты – Мансийский\n     автономный округ': 'Ханты-Мансийский автономный округ - Югра', \
                     'Кемеровская область': 'Кемеровская область - Кузбасс', \
                     'в т. ч. Ненецкий автономный \n     округ': 'Ненецкий автономный округ', \
                     'Удмурдская Республика': 'Удмуртская Республика', \
                     'Калининградская область': 'Калинингpадская область', \
                     'в т. ч. Ненецкий автономный  округ': 'Ненецкий автономный округ', \
                     'Еврейская авт.область': 'Еврейская автономная область', \
                     'Ямало-Ненецкий автономный \n      округ': 'Ямало-Ненецкий автономный округ'}) \
            .drop(columns=['в том числе:', 'Архангельская область без АО', 'Тюменская область без АО'])
        for column in new_sheet.columns:
            new_sheet[column] = new_sheet[column].replace('-', 0)
            new_sheet[column] = new_sheet[column].astype(float, errors='ignore')
        new_sheet_common = new_sheet[
            ['РОССИЙСКАЯ ФЕДЕРАЦИЯ', 'Центральный федеральный округ', 'Северо-Западный федеральный округ', \
             'Южный федеральный округ', 'Северо-Кавказский федеральный округ', 'Приволжский федеральный округ', \
             'Уральский федеральный округ', 'Сибирский федеральный округ', 'Дальневосточный федеральный округ']]
        new_sheet = new_sheet.drop(columns=new_sheet_common.columns).T
        new_sheet['Unnamed: 1'] = new_sheet.sum(axis=1)
        new_sheet = new_sheet.drop(new_sheet.columns[1:], axis=1).rename(columns={'Unnamed: 1': sheet}).T
        data = data.merge(new_sheet, how='outer')
    data.index = range(2015, 2020)
    data = data.fillna(0)
    data['Пермский край'] = data['Пермский край'] + data['Пермская область']
    data.drop(columns='Пермская область', inplace=True)
    data = data / data.sum() * 100
    data = data.fillna(0)
    data = data.T
    data.columns = ['2015', '2016', '2017', '2018', '2019']
    data = data.T
    return data


# Численность персонала, занятого научными исследованиями и разработками, по категориям по Российской Федерации
def nauka_2(file_excel):
    ch = pd.read_excel(file_excel, sheet_name=1, skiprows=5, index_col=0)[:-6]
    ch = ch.drop(ch.columns[
                     [10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33,
                      34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49]], axis=1)
    ch.columns = ['2010', '2011', '2012', '2013', '2014', '2015', '2016', '2017', '2018', '2019']
    ch = ch.T
    ch = ch.rename(columns={'в том числе Ненецкий автономный округ': 'Ненецкий автономный округ', \
                            'Республика Крым2) ': 'Республика Крым', \
                            'г. Севастополь 2) ': 'г. Севастополь', \
                            'Московская область1)': 'Московская область', \
                            'Республика Ингушетия ': 'Республика Ингушетия', \
                            'Кемеровская область': 'Кемеровская область - Кузбасс', \
                            'Республика Алтай   ': 'Республика Алтай', \
                            'г. Москва1)': 'г. Москва', \
                            'Чеченская Республика ': 'Чеченская Республика', \
                            'в том числе:\nХанты-Мансийский автономный округ - Югра': 'Ханты-Мансийский автономный округ - Югра', \
                            'Кемеровская область- Кузбасс': 'Кемеровская область - Кузбасс', \
                            '  Ямало-Ненецкий\n  автономный округ': 'Ямало-Ненецкий автономный округ'})
    data_common = ch[['Российская Федерация', 'Центральный федеральный округ', 'Северо-Западный федеральный округ', \
                      'Южный федеральный округ', 'Северо-Кавказский федеральный округ', 'Приволжский федеральный округ', \
                      'Уральский федеральный округ', 'Сибирский федеральный округ3) ',
                      'Дальневосточный федеральный округ3) ', 'Архангельская область без АО', 'в том числе:',
                      'Тюменская область без АО']]
    data = ch.drop(columns=data_common.columns)
    data.fillna(0)
    for column in data.columns:
        data[column] = data[column].replace('…4)', 0)
    data = data.drop(data.index[[0, 1, 2, 3, 4]])
    data = data / data.sum() * 100
    data = data.fillna(0)
    return data


# Численность исследователей, имеющих ученую степень, по субъектам Российской Федерации
def nauka_3(file_excel):
    ch = pd.read_excel(file_excel, sheet_name=3, skiprows=5, index_col=0)[:-6]
    ch = ch.drop(ch.columns[[10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29]], axis=1)
    ch.columns = ['2010', '2011', '2012', '2013', '2014', '2015', '2016', '2017', '2018', '2019']
    ch = ch.T
    # data.drop(columns= ['Архангельская область без АО', 'Тюменская область без АО'], axis = 0)
    ch = ch.rename(columns={'в том числе Ненецкий автономный округ': 'Ненецкий автономный округ', \
                            'Республика Крым 2)': 'Республика Крым', \
                            'г. Севастополь 2)': 'г. Севастополь', \
                            'Московская область1)': 'Московская область', \
                            'Кемеровская область': 'Кемеровская область - Кузбасс', \
                            'Республика Алтай   ': 'Республика Алтай', \
                            'Республика Ингушетия ': 'Республика Ингушетия', \
                            'г. Москва1)': 'г. Москва', \
                            'Чеченская Республика ': 'Чеченская Республика', \
                            'в том числе:\nХанты-Мансийский автономный округ - Югра': 'Ханты-Мансийский автономный округ - Югра', \
                            'Кемеровская область- Кузбасс': 'Кемеровская область - Кузбасс', \
                            '  Ямало-Ненецкий\n  автономный округ': 'Ямало-Ненецкий автономный округ'})
    data_common = ch[['Российская Федерация', 'Центральный федеральный округ', 'Северо-Западный федеральный округ', \
                      'Южный федеральный округ', 'Северо-Кавказский федеральный округ', 'Приволжский федеральный округ', \
                      'Уральский федеральный округ', 'Сибирский федеральный округ3)',
                      'Дальневосточный федеральный округ3)', 'Архангельская область без АО', 'в том числе:',
                      'Тюменская область без АО']]
    data = ch.drop(columns=data_common.columns)
    data = data.fillna(0)
    for column in data.columns:
        data[column] = data[column].replace('…4)', 0)
        data[column] = data[column].replace('NaN	', 0)
    data = data.drop(data.index[[0, 1, 2, 3, 4]])
    data = data / data.sum() * 100
    data = data.fillna(0)
    return data


# Внутренние затраты на научные исследования и разработки по видам экономической деятельности по Российской Федерации
def nauka_5(file_excel):
    ch = pd.read_excel(file_excel, sheet_name=1, skiprows=3, index_col=0)[:-6]
    ch = ch.drop(ch.columns[[10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23]], axis=1)
    ch.columns = ['2010', '2011', '2012', '2013', '2014', '2015', '2016', '2017', '2018', '2019']
    ch = ch.T
    ch = ch.rename(columns={'в том числе Ненецкий автономный округ': 'Ненецкий автономный округ', \
                            'Республика Крым 2)': 'Республика Крым', \
                            'г. Севастополь 2)': 'г. Севастополь', \
                            'Московская область1) ': 'Московская область', \
                            'Кемеровская область': 'Кемеровская область - Кузбасс', \
                            'Республика Алтай   ': 'Республика Алтай', \
                            'г. Москва1) ': 'г. Москва', \
                            'Чеченская Республика ': 'Чеченская Республика', \
                            'в том числе:\nХанты-Мансийский автономный округ - Югра': 'Ханты-Мансийский автономный округ - Югра', \
                            'Кемеровская область- Кузбасс': 'Кемеровская область - Кузбасс', \
                            '  Ямало-Ненецкий\n  автономный округ': 'Ямало-Ненецкий автономный округ'})
    data_common = ch[['Российская Федерация', 'Центральный федеральный округ', 'Северо-Западный федеральный округ', \
                      'Южный федеральный округ ', 'Северо-Кавказский федеральный округ ',
                      'Приволжский федеральный округ', \
                      'Уральский федеральный округ', 'Сибирский федеральный округ3)',
                      'Дальневосточный федеральный округ3)', 'Архангельская область без АО', 'в том числе:',
                      'Тюменская область без АО']]
    data = ch.drop(columns=data_common.columns)
    for column in data.columns:
        data[column] = data[column].replace('…4)', 0)
    data = data.drop(data.index[[0, 1, 2, 3, 4]])
    data = data / data.sum() * 100
    data = data.fillna(0)
    return data


# Поступление патентных заявок и выдача охранных документов в России, по субъектам Российской Федерации
def innov7(file_excel):
    data = pd.read_excel(file_excel, skiprows=3, index_col=0).loc[:'Чукотский автономный округ', 2015:].T \
        .rename(columns={'   в том числе\n   Ненецкий автономный округ': 'Ненецкий автономный округ', \
                         'Республика Крым 2)': 'Республика Крым', \
                         'г. Севастополь 2)': 'г. Севастополь', \
                         '\xa0\xa0\xa0Ханты - Мансийский \n   автономный округ - Югра': 'Ханты-Мансийский автономный округ - Югра', \
                         'Кемеровская область': 'Кемеровская область - Кузбасс', \
                         '\xa0\xa0\xa0Ямало - Ненецкий \n   автономный округ': 'Ямало-Ненецкий автономный округ'}) \
        .drop(
        columns=['Архангельская область без АО', 'Тюменская область без АО', np.nan, '\xa0\xa0    \xa0в том числе:']) \
        .fillna(0)
    data_common = data[['Российская Федерация', 'Центральный федеральный округ', 'Северо-Западный федеральный округ', \
                        'Южный федеральный округ', 'Северо-Кавказский федеральный округ',
                        'Приволжский федеральный округ', \
                        'Уральский федеральный округ', 'Сибирский федеральный округ',
                        'Дальневосточный федеральный округ']]
    data = data.drop(columns=data_common.columns)
    for column in data.columns:
        data[column] = data[column].replace('-', 0)
    data = data.T
    data.columns = range(30)
    data = data[list(filter(lambda x: x % 6 > 2, range(30)))].loc['Белгородская область':, :]
    for year in range(2015, 2020):
        data[year] = data.iloc[:, :3].sum(axis=1)
        data = data.drop(columns=data.iloc[:, :3].columns)
    data = data.T
    data = data / data.sum() * 100
    data = data.T
    data.columns = ['2015', '2016', '2017', '2018', '2019']
    data = data.T
    return data


# Уровень инновационной активности организаций, по субъектам Российской Федерации
new_i_n1 = innov_n1('https://rosstat.gov.ru/storage/mediabank/yIkSDjql/innov-n1.xls')

# Удельный вес организаций, осуществлявших технологические инновации,
# в общем числе обследованных организаций, по субъектам Российской Федерации
new_i_n2 = innov_n2('https://rosstat.gov.ru/storage/mediabank/UUpSt5tN/innov-n2.xls')

# Объем инновационных товаров, работ, услуг, по субъектам Российской Федерации
new_i_n3 = innov_n3('https://rosstat.gov.ru/storage/mediabank/Q16dJOt5/innov-n3.xls')

# Удельный вес инновационных товаров, работ, услуг в общем объеме отгруженных
# товаров, выполненных работ, услуг, по субъектам Российской Федерации
new_i_n4 = innov_n4('https://rosstat.gov.ru/storage/mediabank/wfccd6oB/innov-n4.xls')

# Затраты на технологические инновации организаций по субъектам Российской Федерации
new_i_n5 = innov_n5('https://rosstat.gov.ru/storage/mediabank/zGQIj49O/innov-n5.xls')

# Затраты на инновационную деятельность организаций, по субъектам Российской Федерации
new_i_n6 = innov_n6('https://rosstat.gov.ru/storage/mediabank/mJBec3pv/innov-n6.xls')

# Удельный вес затрат на инновационную деятельность в общем объеме отгруженных товаров,
# выполненных работ, услуг, по субъектам Российской Федерации
new_i_n7 = innov_n7('https://rosstat.gov.ru/storage/mediabank/qbLlvxgf/innov-n7.xls')

# данные за 2015-2018 года (больше нет)
# Удельный вес организаций, осуществлявших маркетинговые инновации в отчетном году,
# в общем числе обследованных организаций, по субъектам  Российской Федерации
new_i_n8 = innov_n8('https://rosstat.gov.ru/storage/mediabank/innov-n8.xls')

# данные за 2015-2018 года (больше нет)
# Удельный вес организаций, осуществлявших организационные инновации в отчетном году,
# в общем числе обследованных организаций, по субъектам  Российской Федерации
new_i_n9 = innov_n9('https://rosstat.gov.ru/storage/mediabank/innov-n9.xls')

# Разработанные передовые производственные технологии по субъектам Российской Федерации
new_i8 = innov8('https://rosstat.gov.ru/storage/mediabank/innov8.xls')

# Используемые передовые производственные технологии по субъектам Российской Федерации
new_i9 = innov9('https://rosstat.gov.ru/storage/mediabank/innov9.xls')

# Сведения об использовании объектов интеллектуальной собственности по субъектам Российской Федерации
new_i10 = innov10('https://rosstat.gov.ru/storage/mediabank/innov10.xls')

# Численность персонала, занятого научными исследованиями и разработками, по категориям по Российской Федерации
new_n_2 = nauka_2('https://rosstat.gov.ru/storage/mediabank/TyLqM749/nauka_2.xls')

# Численность исследователей, имеющих ученую степень, по субъектам Российской Федерации
new_n_3 = nauka_3('https://rosstat.gov.ru/storage/mediabank/ey4FSMxG/nauka_3.xls')

# Внутренние затраты на научные исследования и разработки по видам экономической деятельности по Российской Федерации
new_n_5 = nauka_5('https://rosstat.gov.ru/storage/mediabank/jmBvxLCl/nauka_5.xlsx')

# Поступление патентных заявок и выдача охранных документов в России, по субъектам Российской Федерации
new_i7 = innov7('https://rosstat.gov.ru/storage/mediabank/innov7.xls')


@app.route('/', methods=['GET'])
@app.route('/?', methods=['GET'])
def main_page():

    global new_i_n1, new_i_n2, new_i9, new_i10, new_i_n3, new_i_n4, new_i_n5, new_i_n7, new_i8, new_n_2, new_n_5, new_i7, new_n_3, new_i_n6
    i_n1 =new_i_n1
    i_n2 = new_i_n2
    i9 = new_i9
    i10 = new_i10
    i_n3 = new_i_n3
    i_n4 = new_i_n4
    i_n5 = new_i_n5
    i_n7 = new_i_n7
    i8 = new_i8
    n_2 = new_n_2
    n_5 = new_n_5
    i7 = new_i7
    n_3 = new_n_3
    i_n6 = new_i_n6

    C1 = 'on'
    C2 = 'on'
    C3 = 'on'
    C4 = 'on'
    C5 = 'on'
    C6 = 'on'
    C7 = 'on'
    C8 = 'on'
    C9 = 'on'
    C10 ='on'
    C11 ='on'
    C12 ='on'
    C13 ='on'
    C14 ='on'

    if 'C1' in request.args:
        C1 = request.args.get('C1')
    else:
        C1 = '0'
    if 'C2' in request.args:
        C2 = request.args.get('C2')
    else:
        C2 = '0'

    if 'C3' in request.args:
        C3 = request.args.get('C3')
    else:
        C3 = '0'

    if 'C4' in request.args:
        C4 = request.args.get('C4')
    else:
        C4 = '0'

    if 'C5' in request.args:
        C5 = request.args.get('C5')
    else:
        C5 = '0'

    if 'C6' in request.args:
        C6 = request.args.get('C6')
    else:
        C6 = '0'

    if 'C7' in request.args:
        C7 = request.args.get('C7')
    else:
        C7 = '0'

    if 'C8' in request.args:
        C8 = request.args.get('C8')
    else:
        C8 = '0'

    if 'C9' in request.args:
        C9 = request.args.get('C9')
    else:
        C9 = '0'

    if 'C10' in request.args:
        C10 = request.args.get('C10')
    else:
        C10 = '0'

    if 'C11' in request.args:
        C11 = request.args.get('C11')
    else:
        C11 = '0'

    if 'C12' in request.args:
        C12 = request.args.get('C12')
    else:
        C12 = '0'

    if 'C13' in request.args:
        C13 = request.args.get('C13')
    else:
        C13 = '0'

    if 'C14' in request.args:
        C14 = request.args.get('C14')
    else:
        C14 = '0'


    if C1 == 'on':
        b1=1
    else:
        b1=0

    if C2 == 'on':
        b2=1
    else:
        b2=0

    if C3 == 'on':
        b3=1
    else:
        b3=0

    if C4 == 'on':
        b4=1
    else:
        b4=0

    if C5 == 'on':
        b5=1
    else:
        b5=0

    if C6 == 'on':
        b6=1
    else:
        b6=0

    if C7 == 'on':
        b7=1
    else:
        b7=0

    if C8 == 'on':
        b8=1
    else:
        b8=0

    if C9 == 'on':
        b9=1
    else:
        b9=0

    if C10 == 'on':
        b10=1
    else:
        b10=0

    if C11 == 'on':
        b11=1
    else:
        b11=0

    if C12 == 'on':
        b12=1
    else:
        b12=0

    if C13 == 'on':
        b13=1
    else:
        b13=0

    if C14 == 'on':
        b14=1
    else:
        b14=0

    if (b1==b2==b3==b4==b5==b6==b7==b8==b9==b10==b11==b12==b13==b14==0):
        b1 = 1
        b2 = 1
        b3 = 1
        b4 = 1
        b5 = 1
        b6 = 1
        b7 = 1
        b8 = 1
        b9 = 1
        b10 = 1
        b11 = 1
        b12 = 1
        b13 = 1
        b14 = 1

    ln1 = ['i_n1', 'i_n2', 'i_n6', 'i9', 'i10']
    ln2 = ['i_n3', 'i_n4', 'i_n5', 'i_n7']
    ln3 = ['i8', 'n_2', 'n_3', 'n_5', 'i7']
    cou = ['i_n1', 'i_n2', 'i_n6', 'i9', 'i10', 'i_n3', 'i_n4', 'i_n5', 'i_n7', 'i8', 'n_2', 'n_3', 'n_5', 'i7']
    if b1 == 0:
        ln1.remove('i_n1')
        cou.remove('i_n1')
        i_n1 = 0
    if b2 == 0:
        ln1.remove('i_n2')
        cou.remove('i_n2')
        i_n2 = 0
    if b3 == 0:
        ln1.remove('i_n6')
        cou.remove('i_n6')
        i_n6 = 0
    if b4 == 0:
        ln1.remove('i9')
        cou.remove('i9')
        i9 = 0
    if b5 == 0:
        ln1.remove('i10')
        cou.remove('i10')
        i10 = 0
    if b6 == 0:
        ln2.remove('i_n3')
        cou.remove('i_n3')
        i_n3 = 0
    if b7 == 0:
        ln2.remove('i_n4')
        cou.remove('i_n4')
        i_n4 = 0
    if b8 == 0:
        ln2.remove('i_n5')
        cou.remove('i_n5')
        i_n5 = 0
    if b9 == 0:
        ln2.remove('i_n7')
        cou.remove('i_n7')
        i_n7 = 0
    if b10 == 0:
        ln3.remove('i8')
        cou.remove('i8')
        i8 = 0
    if b11 == 0:
        ln3.remove('n_2')
        cou.remove('n_2')
        n_2 = 0
    if b12 == 0:
        ln3.remove('n_3')
        cou.remove('n_3')
        n_3 = 0
    if b13 == 0:
        ln3.remove('n_5')
        cou.remove('n_5')
        n_5 = 0
    if b14 == 0:
        ln3.remove('i7')
        cou.remove('i7')
        i7 = 0
    n1 = len(ln1)
    n2 = len(ln2)
    n3 = len(ln3)
    n = len(cou)
    df = (n1 / n) * (i_n1 + i_n2 + i_n6 + i9 + i10) + (n2 / n) * (i_n3 + i_n4 + i_n5 + i_n7) + (n3 / n) * (
                i8 + n_2 + n_3 + n_5 + i7)

    gost_regs = {'Республика Адыгея': 'ADY',
                 'Республика Алтай': 'ALI',
                 'Республика Башкортостан': 'BAS',
                 'Республика Бурятия': 'BUR',
                 'Республика Дагестан': 'DAG',
                 'Республика Ингушетия': 'ING',
                 'Кабардино-Балкарская Республика': 'KAB',
                 'Республика Калмыкия': 'KAI',
                 'Карачаево-Черкесская Республика': 'KAO',
                 'Республика Карелия': 'KAR',
                 'Республика Коми': 'KOM',
                 'Республика Крым': 'KRM',
                 'Республика Марий Эл': 'MAR',
                 'Республика Мордовия': 'MOR',
                 'Республика Саха (Якутия)': 'SAH',
                 'Республика Северная Осетия - Алания': 'NOR',
                 'Республика Татарстан': 'TAT',
                 'Республика Тыва': 'TUV',
                 'Удмуртская Республика': 'UDM',
                 'Республика Хакасия': 'KHK',
                 'Чеченская Республика': 'CHA',
                 'Чувашская Республика': 'CHV',
                 'Алтайский край': 'ALT',
                 'Забайкальский край': 'ZAB',
                 'Камчатский край': 'KAM',
                 'Краснодарский край': 'KRA',
                 'Красноярский край': 'KYA',
                 'Пермский край': 'PER',
                 'Приморский край': 'PRI',
                 'Ставропольский край': 'STA',
                 'Хабаровский край': 'KHA',
                 'Амурская область': 'AMU',
                 'Архангельская область': 'ARK',
                 'Астраханская область': 'AST',
                 'Белгородская область': 'BEL',
                 'Брянская область': 'BRY',
                 'Владимирская область': 'VLA',
                 'Волгоградская область': 'VGG',
                 'Вологодская область': 'VLG',
                 'Воронежская область': 'VOR',
                 'Ивановская область': 'IVA',
                 'Иркутская область': 'IRK',
                 'Калининградская область': 'KAG',
                 'Калужская область': 'KAL',
                 'Кемеровская область': 'KEM',
                 'Кировская область': 'KIR',
                 'Костромская область': 'KOS',
                 'Курганская область': 'KUG',
                 'Курская область': 'KUR',
                 'Ленинградская область': 'LEN',
                 'Липецкая область': 'LIP',
                 'Магаданская область': 'MAG',
                 'Московская область': 'MOS',
                 'Мурманская область': 'MUR',
                 'Нижегородская область': 'NIZ',
                 'Новгородская область': 'NGR',
                 'Новосибирская область': 'NVS',
                 'Омская область': 'OMS',
                 'Оренбургская область': 'ORE',
                 'Орловская область': 'ORL',
                 'Пензенская область': 'PNZ',
                 'Псковская область': 'PSK',
                 'Ростовская область': 'ROS',
                 'Рязанская область': 'RYA',
                 'Самарская область': 'SAM',
                 'Саратовская область': 'SAR',
                 'Сахалинская область': 'SAK',
                 'Свердловская область': 'SVE',
                 'Смоленская область': 'SMO',
                 'Тамбовская область': 'TAM',
                 'Тверская область': 'TVE',
                 'Томская область': 'TOM',
                 'Тульская область': 'TUL',
                 'Тюменская область': 'TYU',
                 'Ульяновская область': 'ULY',
                 'Челябинская область': 'CHE',
                 'Ярославская область': 'YAR',
                 'Москва': 'MOW',
                 'Санкт-Петербург': 'SPB',
                 'Севастополь': 'SEV',
                 'Еврейская автономная область': 'JEW',
                 'Ненецкий автономный округ': 'NEN',
                 'Ханты-Мансийский автономный округ - Югра': 'KHM',
                 'Чукотский автономный округ': 'CHU',
                 'Ямало-Ненецкий автономный округ': 'YAN'}

    df = df.rename(columns={
        'г. Москва': 'Москва', \
        'Кемеровская область - Кузбасс': 'Кемеровская область', \
        'Калинингpадская область': 'Калининградская область', \
        'г. Санкт-Петербург': 'Санкт-Петербург', \
        'г. Севастополь': 'Севастополь'}).rename(columns=gost_regs)

    df = df.T
    for year in range(2015, 2020):
        df[str(year)] = (df[str(year)] - df[str(year)].min()) / (df[str(year)].max() - df[str(year)].min())
    df = df.T
    df.to_json('templates/temp.json')

    with open('templates/temp.json', 'r', encoding='utf-8') as fh:
        regionsData = json.load(fh)

    return render_template("index.html", regionsData=json.dumps(regionsData))

@app.route('/data.html', methods=['GET'])
def statistik_page():
    with open('templates/n1.json', 'r', encoding='utf-8') as fh:
        regionsData = json.load(fh)
    if 'data' in request.args:
        data = request.args.get('data')
        if data=='1' :
            with open('templates/n1.json', 'r', encoding='utf-8') as fh:
                regionsData = json.load(fh)
        if data=='2' :
            with open('templates/n2.json', 'r', encoding='utf-8') as fh:
                regionsData = json.load(fh)
        if data=='3' :
            with open('templates/n3.json', 'r', encoding='utf-8') as fh:
                regionsData = json.load(fh)
        if data=='4' :
            with open('templates/n4.json', 'r', encoding='utf-8') as fh:
                regionsData = json.load(fh)
        if data=='5' :
            with open('templates/n5.json', 'r', encoding='utf-8') as fh:
                regionsData = json.load(fh)
        if data=='6':
            with open('templates/n6.json', 'r', encoding='utf-8') as fh:
                regionsData = json.load(fh)
        if data=='7':
            with open('templates/n7.json', 'r', encoding='utf-8') as fh:
                regionsData = json.load(fh)
        if data=='8':
            with open('templates/inn8.json', 'r', encoding='utf-8') as fh:
                regionsData = json.load(fh)
        if data=='9':
            with open('templates/inn9.json', 'r', encoding='utf-8') as fh:
                regionsData = json.load(fh)
        if data==10:
            with open('templates/inn10.json', 'r', encoding='utf-8') as fh:
                regionsData = json.load(fh)
        if data==11:
            with open('templates/nau2.json', 'r', encoding='utf-8') as fh:
                regionsData = json.load(fh)
        if data==12:
            with open('templates/nau3.json', 'r', encoding='utf-8') as fh:
                regionsData = json.load(fh)
        if data==13:
            with open('templates/nau5.json', 'r', encoding='utf-8') as fh:
                regionsData = json.load(fh)
        if data==14:
            with open('templates/inn7.json', 'r', encoding='utf-8') as fh:
                regionsData = json.load(fh)
    return  render_template("data.html", regionsData=json.dumps(regionsData))

if __name__ == '__main__':
    app.run(debug=True)
